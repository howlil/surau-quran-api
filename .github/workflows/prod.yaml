name: Deploy Express API with Prisma to cPanel

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
      
      # Gunakan zip daripada tar
      - name: Create deployment package
        run: |
          # Buat zip (lebih stabil daripada tar)
          zip -r build.zip . -x "node_modules/*" ".git/*" ".github/*" ".env.*"
          
          # Verifikasi
          ls -la build.zip
          
      - name: Create directory on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME_PROD }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          passphrase: ${{ secrets.SSH_PASSPHRASE_PROD }}
          script: |
            # Cek direktori home user
            echo "Current directory: $(pwd)"
            echo "Home directory: $HOME"
            echo "User: $(whoami)"
            
            # Buat direktori di home user
            mkdir -p ~/api
            chmod 755 ~/api
            echo "Directory created at: ~/api"
            ls -la ~/
            
      - name: Deploy files to cPanel
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME_PROD }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          passphrase: ${{ secrets.SSH_PASSPHRASE_PROD }} 
          source: "build.zip"
          target: "~/api"
          
      - name: Deploy on cPanel
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME_PROD }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          passphrase: ${{ secrets.SSH_PASSPHRASE_PROD }}
          script: |
            cd ~/api
            
            # Backup node_modules dan .env
            if [ -d node_modules ]; then
              mv node_modules node_modules_backup
            fi
            
            if [ -f .env ]; then
              cp .env .env_backup
            fi
            
            # Unzip files
            unzip -o build.zip
            
            # Restore .env dari backup (jangan overwrite dengan secrets)
            if [ -f .env_backup ]; then
              cp .env_backup .env
              echo "Restored .env from backup"
            else
              # Buat .env baru dari secrets hanya jika belum ada backup
              cat > .env << EOL
            DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}
            NODE_ENV=production
            PORT=5000
            EOL
              echo "Created new .env from secrets"
            fi
            
            # Restore node_modules atau install dependencies
            if [ -d node_modules_backup ]; then
              rm -rf node_modules
              mv node_modules_backup node_modules
            else
              # Setup NVM dan Node.js 18.20
              if [ ! -d "$HOME/.nvm" ]; then
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
              fi
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              nvm install 18.20
              nvm use 18.20
              
              # Install dependencies
              npm install
            fi
            
            # Clean up old backup
            if [ -f .env_backup ]; then
              rm .env_backup
            fi
            
            # Generate Prisma
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 18.20
            npx prisma generate
            
            # Setup PM2 dengan Node.js path yang benar
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 18.20
            
            # Install PM2 secara global dengan Node.js yang tepat
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
              pm2 install pm2-logrotate
              pm2 set pm2-logrotate:max_size 10M
              pm2 set pm2-logrotate:retain 30
            fi
            
            # Stop existing app gracefully
            pm2 stop surau-quran-api || true
            pm2 delete surau-quran-api || true
            
            # Create PM2 config dengan path node yang dinamis
            NODE_PATH=$(which node)
            cat > ecosystem.config.js << EOL
            module.exports = {
              apps: [{
                name: "surau-quran-api",
                script: "index.js",
                exec_mode: "fork",
                instances: 1,
                autorestart: true,
                watch: false,
                max_memory_restart: "500M",
                restart_delay: 4000,
                max_restarts: 10,
                min_uptime: "10s",
                kill_timeout: 5000,
                env: {
                  NODE_ENV: "production",
                  PORT: 8080
                },
                interpreter: "${NODE_PATH}",
                error_file: "logs/err.log",
                out_file: "logs/out.log",
                log_file: "logs/combined.log",
                time: true
              }]
            };
            EOL
            
            # Create logs directory
            mkdir -p logs
            
            # Start app dengan startup script
            pm2 start ecosystem.config.js
            pm2 save
            
            # Setup PM2 startup (agar auto start saat server restart)
            pm2 startup systemd -u $(whoami) --hp $HOME || true
            
            # Tunggu app benar-benar jalan
            sleep 5
            
            # Health check - pastikan app jalan
            echo "=== Checking application health ==="
            pm2 status
            
            # Cek apakah app benar-benar jalan di port yang benar
            if netstat -tlnp | grep :8080; then
              echo "✅ App is running on port 8080"
            else
              echo "❌ App is NOT running on port 8080"
              pm2 logs surau-quran-api --lines 20
            fi
            
            # Clean up
            rm build.zip
            
            # Final status
            echo "=== Final PM2 Status ==="
            pm2 status
            pm2 monit --no-interaction &
            sleep 2
            pkill -f "pm2 monit"
            
            echo "=== Application Logs (last 10 lines) ==="
            pm2 logs surau-quran-api --lines 10 --nostream || echo "No logs available yet"
            
            echo "=== Deployment Summary ==="
            echo "Directory: $(pwd)"
            echo "Node version: $(node --version)"
            echo "PM2 version: $(pm2 --version)"
            echo "Environment file exists: $([ -f .env ] && echo 'YES' || echo 'NO')"