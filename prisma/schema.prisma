datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "windows"]
}

/**
 * ==============
 * ENUM
 * ==============
 */

enum ProgramType {
  GROUP
  PRIVATE
}

enum PaymentStatus {
  PENDING
  SETTLEMENT
  DENY
  CANCEL
  EXPIRE
}

enum VerificationStatus {
  WAITING
  VERIFIED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  PERMISSION
  SICK
  NOT_ATTENDED
  LATE
}

enum PayoutStatus {
  DRAFT
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}



/**
 * ==============
 * 1. AUTH & USER MANAGEMENT
 * ==============
 */

enum Role {
  SUPER_ADMIN
  ADMIN_SURAU
  ADMIN
  STUDENT
  TEACHER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  rfid      String?  @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  admin   Admin?
  teacher Teacher?

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("admins")
}

/**
 * ==============
 * 6. CONTENT MANAGEMENT
 * ==============
 */

model Gallery {
  id         String   @id @default(uuid())
  title      String
  coverImage String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("gallery")
}

model Testimonial {
  id        String   @id @default(uuid())
  name      String
  position  String
  content   String   @db.Text
  photoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

/**
 * ==============
 * MANAGEMENT TEACHER
 * ==============
 */

model Teacher {
  id               String   @id @default(uuid())
  userId           String   @unique
  nip              String?  @unique
  name             String
  whatsappNumber   String?
  address          String?
  gender           Gender?
  birthDate        String?
  profilePhoto     String?
  expertise        String?
  lastEducation    String?
  accountNumber    String?
  bankName         String?
  contractDocument String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  classProgram      ClassProgram[]
  payroll           Payroll[]
  teacherAttendance TeacherAttendance[]

  @@index([nip])
  @@index([name])
  @@index([createdAt])
  @@map("teachers")
}

model TeacherAttendance {
  id               String           @id @default(uuid())
  classProgramId   String
  payrollId        String?
  teacherId        String
  date             String
  timeIn           String?
  sks              Int
  permissionLetter String?
  notes            String?
  attendanceStatus AttendanceStatus
  isLate           Boolean          @default(false)
  lateMinutes      Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  payroll      Payroll?     @relation(fields: [payrollId], references: [id])
  classProgram ClassProgram @relation(fields: [classProgramId], references: [id])

  @@index([teacherId])
  @@index([date])
  @@index([attendanceStatus])
  @@index([classProgramId])
  @@map("teacher_attendance")
}

/**
 * ==============
 * 2. STUDENT MANAGEMENT
 * ==============
 */
enum EducationLevel {
  NOT_SCHOOL
  PAUD
  KINDERGARTEN
  ELEMENTARY
  JUNIOR_HIGH
  SENIOR_HIGH
  UNIVERSITY
  GENERAL
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  LEAVE
}

model Student {
  id             String          @id @default(uuid())
  userId         String          @unique
  whatsappNumber String?
  nis            String?         @unique
  studentName    String
  nickname       String?
  birthDate      String?
  gender         Gender
  address        String?
  educationLevel EducationLevel?
  schoolClass    String?
  schoolName     String?
  parentName     String?
  pickupPerson   String?
  familyCard     String?
  familyRelation String?
  relationType   String?
  familyId       String?
  isFamily       Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id])
  enrollment        Enrollment?
  studentProgram    StudentProgram[]
  studentAttendance StudentAttendance[]
  substituteClass   SubstituteClass[]

  @@index([nis])
  @@index([studentName])
  @@index([createdAt])
  @@index([isFamily])
  @@map("students")
}

model StudentAttendance {
  id               String           @id @default(uuid())
  classProgramId   String
  studentId        String
  date             String
  attendanceStatus AttendanceStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  student      Student      @relation(fields: [studentId], references: [id])
  classProgram ClassProgram @relation(fields: [classProgramId], references: [id])

  @@index([studentId])
  @@index([date])
  @@index([attendanceStatus])
  @@index([classProgramId])
  @@map("student_attendance")
}

model StudentProgram {
  id             String        @id @default(uuid())
  studentId      String
  programId      String
  classProgramId String?
  status         StudentStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  student         Student                @relation(fields: [studentId], references: [id])
  program         Program                @relation(fields: [programId], references: [id])
  classProgram    ClassProgram?          @relation(fields: [classProgramId], references: [id])
  statusHistory   StudentStatusHistory[]
  sppPeriods      SppPeriod[]
  studentSchedule StudentSchedule[]
}

model StudentSchedule {
  id               String    @id @default(uuid())
  studentProgramId String
  dayOfWeek        DayOfWeek
  teachingTimeId   String
  order            Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  studentProgram StudentProgram @relation(fields: [studentProgramId], references: [id])
  teachingTime   TeachingTime   @relation(fields: [teachingTimeId], references: [id])
}

model StudentStatusHistory {
  id               String        @id @default(uuid())
  studentProgramId String
  oldStatus        StudentStatus
  newStatus        StudentStatus
  changeDate       String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  studentProgram StudentProgram @relation(fields: [studentProgramId], references: [id])
}

model SubstituteClass {
  id             String    @id @default(uuid())
  classProgramId String
  studentId      String
  isTemp         Boolean   @default(true)
  date           String
  count          Int       @default(1)
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  classProgram ClassProgram @relation(fields: [classProgramId], references: [id])
  student      Student      @relation(fields: [studentId], references: [id])

  @@unique([classProgramId, studentId, date])
  @@index([date])
  @@map("substitute_classes")
}


/**
 * ==============
 * 4. ACADEMIC MANAGEMENT
 * ==============
 */

model Class {
  id                 String   @id @default(uuid())
  className          String
  cardColor          String?
  hikvisionIpAddress String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  classProgram ClassProgram[]

  @@index([className])
  @@map("classes")
}

model Program {
  id          String      @id @default(uuid())
  programName String
  description String?
  cover       String?
  programType ProgramType @default(GROUP)
  sppFee      Decimal     @default(300000.00) @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  classProgram   ClassProgram[]
  studentProgram StudentProgram[]

  @@index([programName])
  @@index([programType])
  @@map("programs")
}

model TeachingTime {
  id        String   @id @default(uuid())
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classProgram    ClassProgram[]
  studentSchedule StudentSchedule[]

  @@index([startTime])
  @@map("teaching_times")
}

model ClassProgram {
  id             String    @id @default(uuid())
  classId        String?
  programId      String
  dayOfWeek      DayOfWeek
  teachingTimeId String
  teacherId      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  class             Class?              @relation(fields: [classId], references: [id])
  program           Program             @relation(fields: [programId], references: [id])
  teachingTime      TeachingTime        @relation(fields: [teachingTimeId], references: [id])
  teacher           Teacher?            @relation(fields: [teacherId], references: [id])
  studentProgram    StudentProgram[]
  studentAttendance StudentAttendance[]
  teacherAttendance TeacherAttendance[]
  substituteClass   SubstituteClass[]

  @@index([programId])
  @@index([dayOfWeek])
  @@index([teacherId])
  @@map("class_programs")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

/**
 * ==============
 *  PAYMENT & FINANCE
 * ==============
 */

 model Payroll {
  id          String  @id @default(uuid())
  payoutId    String? @unique
  referenceNo String? @unique

  teacherId String
  period    String
  month     String
  year      Int

  totalAttendance   Int @default(0)
  totalLate         Int @default(0)
  totalNoNotice     Int @default(0)
  totalNoPermission Int @default(0)

  attendanceIncentive Decimal  @default(0) @db.Decimal(10, 2)
  otherIncentive      Decimal? @db.Decimal(10, 2)
  totalIncentive      Decimal  @default(0) @db.Decimal(10, 2)

  lateDeduction         Decimal @default(0) @db.Decimal(10, 2)
  noNoticeDeduction     Decimal @default(0) @db.Decimal(10, 2)
  noPermissionDeduction Decimal @default(0) @db.Decimal(10, 2)
  totalDeduction        Decimal @default(0) @db.Decimal(10, 2)

  totalSalary     Decimal      @db.Decimal(10, 2)
  status          PayoutStatus
  notes           String?
  calculationDate DateTime     @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher           Teacher             @relation(fields: [teacherId], references: [id])
  teacherAttendance TeacherAttendance[]

  @@index([teacherId])
  @@index([month, year])
  @@index([status])
  @@map("payrolls")
}

model Voucher {
  id          String      @id @default(uuid())
  voucherCode String      @unique
  voucherName String
  type        VoucherType
  amount      Decimal     @db.Decimal(10, 2)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  payments Payment[]

  @@index([voucherCode])
  @@index([isActive])
  @@map("vouchers")
}

model SppPeriod {
  id               String   @id @default(uuid())
  studentProgramId String
  month            String
  year             Int
  billingDate      String
  baseAmount       Decimal  @db.Decimal(10, 2)
  paymentId        String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  studentProgram StudentProgram @relation(fields: [studentProgramId], references: [id])
  payment        Payment?       @relation(fields: [paymentId], references: [id])

  @@index([month, year])
  @@index([billingDate])
  @@map("spp_periods")
}

model Enrollment {
  id             String   @id @default(uuid())
  studentId      String   @unique
  enrollmentFee  Decimal  @db.Decimal(10, 2)
  enrollmentDate String
  baseAmount     Decimal  @db.Decimal(10, 2)
  paymentId      String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  student Student  @relation(fields: [studentId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([enrollmentDate])
  @@map("enrollments")
}

model Payment {
  id            String        @id @default(uuid())
  paymentType   PaymentType
  orderId       String?       @unique
  transactionId String?       @unique
  paymentMethod String
  baseAmount    Decimal       @db.Decimal(10, 2)
  discount      Decimal?      @db.Decimal(10, 2)
  voucherAmount Decimal?      @db.Decimal(10, 2)
  totalAmount   Decimal       @db.Decimal(10, 2)
  paymentStatus PaymentStatus
  paymentDate   String
  evidence      String?
  voucherId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  voucher    Voucher?    @relation(fields: [voucherId], references: [id])
  sppPeriod  SppPeriod?
  enrollment Enrollment?

  @@index([paymentType])
  @@index([paymentStatus])
  @@index([paymentDate])
  @@index([orderId])
  @@index([transactionId])
  @@map("payments")
}

model Finance {
  id              String           @id @default(uuid())
  sourceId        String?          @unique
  date            String
  description     String
  paymentMethod   String
  type            FinanceType
  incomeCategory  IncomeCategory?
  expenseCategory ExpenseCategory?
  total           Decimal          @db.Decimal(12, 2)
  evidence        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([date])
  @@index([type])
  @@index([incomeCategory])
  @@index([expenseCategory])
  @@map("finance")
}

enum PaymentType {
  ENROLLMENT
  SPP
}

enum VoucherType {
  PERCENTAGE
  NOMINAL
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum IncomeCategory {
  SPP
  ENROLLMENT
  DONATION
  OTHER_INCOME
}

enum ExpenseCategory {
  PAYROLL_SALARY
  OPERATIONAL
  UTILITIES
  MAINTENANCE
  MARKETING
  SUPPLIES
  OTHER_EXPENSE
}

/**
 * ==============
 * TEMP DATA
 * ==============
 */

model EnrollmentTemp {
  id             String          @id @default(uuid())
  studentName    String
  nickname       String?
  birthDate      String?
  gender         Gender
  address        String?
  educationLevel EducationLevel?
  schoolClass    String?
  email          String
  schoolName     String?
  parentName     String
  pickupPerson   String?
  whatsappNumber String?
  programId      String
  voucherCode    String?
  enrollmentFee  Decimal         @db.Decimal(10, 2)
  discount       Decimal         @db.Decimal(10, 2)
  totalFee       Decimal         @db.Decimal(10, 2)
  paymentId      String          @unique
  voucherId      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([email])
  @@index([programId])
  @@index([createdAt])
  @@map("enrollment_temp")
}

model PrivateEnrollmentTemp {
  id               String   @id @default(uuid())
  privateStudentId String
  isFamily         Boolean  @default(false)
  familyRelation   String?
  relationType     String?
  familyCard       String?
  voucherCode      String?
  discount         Decimal? @db.Decimal(10, 2)
  totalFee         Decimal  @db.Decimal(10, 2)
  programId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  privateStudent PrivateStudentTemp @relation(fields: [privateStudentId], references: [id])

  @@index([programId])
  @@map("private_enrollment_temp")
}

model PrivateStudentTemp {
  id                    String                  @id @default(uuid())
  studentName           String
  nickname              String?
  birthDate             String?
  gender                Gender
  address               String?
  educationLevel        EducationLevel?
  schoolClass           String?
  email                 String
  schoolName            String?
  parentName            String
  pickupPerson          String?
  whatsappNumber        String?
  enrollmentFee         Decimal                 @db.Decimal(10, 2)
  privateEnrollmentTemp PrivateEnrollmentTemp[]

  @@index([email])
  @@map("private_student_temp")
}
