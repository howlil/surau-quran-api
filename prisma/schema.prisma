datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "windows"]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  rfid      String?  @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  siswa Siswa?
  admin Admin?
  guru  Guru?
}

model Siswa {
  id               String  @id @default(uuid())
  userId           String  @unique
  noWhatsapp       String?
  nis              String? @unique
  namaMurid        String
  namaPanggilan    String?
  tanggalLahir     String?
  jenisKelamin     Gender
  alamat           String?
  strataPendidikan SPM?
  kelasSekolah     String?
  namaSekolah      String?
  namaOrangTua     String?
  namaPenjemput    String?
  kartuKeluarga    String?
  hubunganKeluarga String?
  jenisHubungan    String?
  keluargaId       String?
  isFamily         Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id])
  pendaftaran    Pendaftaran?
  programSiswa   ProgramSiswa[]
  AbsensiSiswa   AbsensiSiswa[]
  kelasPengganti KelasPengganti[]
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Guru {
  id                 String   @id @default(uuid())
  userId             String   @unique
  nip                String?  @unique
  nama               String
  noWhatsapp         String?
  alamat             String?
  jenisKelamin       Gender?
  tanggalLahir       String?
  fotoProfile        String?
  keahlian           String?
  pendidikanTerakhir String?
  noRekening         String?
  namaBank           String?
  suratKontrak       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id])
  kelasProgram KelasProgram[]
  payroll      Payroll[]
  AbsensiGuru  AbsensiGuru[]
}

model Kelas {
  id                 String   @id @default(uuid())
  namaKelas          String
  warnaCard          String?
  ipAddressHikvision String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  kelasProgram KelasProgram[]
}

model Program {
  id          String      @id @default(uuid())
  namaProgram String
  deskripsi   String?
  cover       String?
  tipeProgram TipeProgram @default(GROUP)
  biayaSpp    Decimal     @default(300000.00) @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  kelasProgram KelasProgram[]
  programSiswa ProgramSiswa[]
}

enum TipeProgram {
  GROUP
  PRIVATE
}

model Testimoni {
  id        String   @id @default(uuid())
  nama      String
  posisi    String
  isi       String   @db.Text
  fotoUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Galeri {
  id          String   @id @default(uuid())
  judulFoto   String
  coverGaleri String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Finance {
  id               String           @id @default(uuid())
  tanggal          String
  deskripsi        String
  metodePembayaran MetodePembayaran
  type             FinanceType
  category         FinanceCategory
  total            Decimal          @db.Decimal(12, 2)
  evidence         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model JamMengajar {
  id         String   @id @default(uuid())
  jamMulai   String
  jamSelesai String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  kelasProgram       KelasProgram[]
  JadwalProgramSiswa JadwalProgramSiswa[]
}

model KelasProgram {
  id            String   @id @default(uuid())
  kelasId       String?
  programId     String
  hari          HARI
  jamMengajarId String
  guruId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  kelas          Kelas?           @relation(fields: [kelasId], references: [id])
  program        Program          @relation(fields: [programId], references: [id])
  jamMengajar    JamMengajar      @relation(fields: [jamMengajarId], references: [id])
  guru           Guru?            @relation(fields: [guruId], references: [id])
  programSiswa   ProgramSiswa[]
  absensiSiswa   AbsensiSiswa[]
  absensiGuru    AbsensiGuru[]
  kelasPengganti KelasPengganti[]
}

model KelasPengganti {
  id             String    @id @default(uuid())
  kelasProgramId String
  siswaId        String
  isTemp         Boolean   @default(true)
  tanggal        String
  count          Int       @default(1)
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  kelasProgram KelasProgram @relation(fields: [kelasProgramId], references: [id])
  siswa        Siswa        @relation(fields: [siswaId], references: [id])

  @@unique([kelasProgramId, siswaId, tanggal])
  @@map("kelas_pengganti")
}

model Pendaftaran {
  id               String   @id @default(uuid())
  siswaId          String   @unique
  tanggalDaftar    String
  biayaPendaftaran Decimal  @db.Decimal(10, 2)
  pembayaranId     String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  siswa      Siswa       @relation(fields: [siswaId], references: [id])
  pembayaran Pembayaran? @relation(fields: [pembayaranId], references: [id])
}

model ProgramSiswa {
  id             String      @id @default(uuid())
  siswaId        String
  programId      String
  kelasProgramId String?
  status         StatusSiswa
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  siswa              Siswa                @relation(fields: [siswaId], references: [id])
  program            Program              @relation(fields: [programId], references: [id])
  kelasProgram       KelasProgram?        @relation(fields: [kelasProgramId], references: [id])
  riwayatStatus      RiwayatStatusSiswa[]
  periodeSpp         PeriodeSpp[]
  JadwalProgramSiswa JadwalProgramSiswa[]
}

model JadwalProgramSiswa {
  id             String   @id @default(uuid())
  programSiswaId String
  hari           HARI
  jamMengajarId  String
  urutan         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  programSiswa ProgramSiswa @relation(fields: [programSiswaId], references: [id])
  jamMengajar  JamMengajar  @relation(fields: [jamMengajarId], references: [id])
}

model RiwayatStatusSiswa {
  id               String      @id @default(uuid())
  programSiswaId   String
  statusLama       StatusSiswa
  statusBaru       StatusSiswa
  tanggalPerubahan String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  programSiswa ProgramSiswa @relation(fields: [programSiswaId], references: [id])
}

model AbsensiSiswa {
  id              String          @id @default(uuid())
  kelasProgramId  String
  siswaId         String
  tanggal         String
  statusKehadiran StatusKehadiran
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  siswa        Siswa        @relation(fields: [siswaId], references: [id])
  kelasProgram KelasProgram @relation(fields: [kelasProgramId], references: [id])
}

model AbsensiGuru {
  id              String          @id @default(uuid())
  kelasProgramId  String
  payrollId       String?
  guruId          String
  tanggal         String
  jamMasuk        String?
  sks             Int
  suratIzin       String?
  keterangan      String?
  statusKehadiran StatusKehadiran
  terlambat       Boolean         @default(false)
  menitTerlambat  Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  guru         Guru         @relation(fields: [guruId], references: [id])
  payroll      Payroll?     @relation(fields: [payrollId], references: [id])
  kelasProgram KelasProgram @relation(fields: [kelasProgramId], references: [id])
}

model Voucher {
  id          String      @id @default(uuid())
  kodeVoucher String      @unique
  namaVoucher String
  tipe        TipeVoucher
  nominal     Decimal     @db.Decimal(10, 2)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  Pembayaran Pembayaran[]
}

model PeriodeSpp {
  id             String   @id @default(uuid())
  programSiswaId String
  pembayaranId   String?  @unique
  bulan          String
  tahun          Int
  tanggalTagihan String
  jumlahTagihan  Decimal  @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  programSiswa ProgramSiswa @relation(fields: [programSiswaId], references: [id])
  pembayaran   Pembayaran?  @relation(fields: [pembayaranId], references: [id])
}

model Pembayaran {
  id             String         @id @default(uuid())
  tipePembayaran TipePembayaran
  voucherId      String?
  orderId        String?        @unique
  transactionId  String?        @unique
  discount       Decimal?       @db.Decimal(10, 2)
  totalTagihan   Decimal        @db.Decimal(10, 2)

  metodePembayaran  String?
  statusPembayaran  StatusPembayaran
  tanggalPembayaran String
  evidence          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  periodeSpp  PeriodeSpp?
  pendaftaran Pendaftaran?
  voucher     Voucher?     @relation(fields: [voucherId], references: [id])
}

model Payroll {
  id      String @id @default(uuid())
  guruId  String
  periode String
  bulan   String
  tahun   Int

  totalKehadiran     Int @default(0)
  totalTerlambat     Int @default(0)
  totalAbsen         Int @default(0)
  totalTidakAdaKabar Int @default(0)

  insentifKehadiran Decimal? @db.Decimal(10, 2)
  insentifLainya    Decimal? @db.Decimal(10, 2)
  totalInsentif     Decimal? @db.Decimal(10, 2)

  potonganTerlambat     Decimal? @db.Decimal(10, 2)
  potonganTidakAdaKabar Decimal? @db.Decimal(10, 2)
  potonganAbsen         Decimal? @db.Decimal(10, 2)
  totalPotongan         Decimal  @db.Decimal(10, 2)

  gajiPokok        Decimal       @db.Decimal(10, 2)
  totalGaji        Decimal       @db.Decimal(10, 2)
  status           StatusPayroll
  catatan          String?
  tanggalKalkulasi DateTime      @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guru        Guru          @relation(fields: [guruId], references: [id])
  absensiGuru AbsensiGuru[]
}

enum HARI {
  SENIN
  SELASA
  RABU
  KAMIS
  JUMAT
  SABTU
}

enum Role {
  SUPER_ADMIN
  ADMIN_SURAU
  ADMIN
  SISWA
  GURU
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum SPM {
  BELUM_SEKOLAH
  PAUD
  TK
  SD
  SMP
  SMA
  KULIAH
  UMUM
}

enum StatusPembayaran {
  PENDING
  SETTLEMENT
  DENY
  CANCEL
  EXPIRE
}

enum StatusVerifikasi {
  MENUNGGU
  DIVERIFIKASI
}

enum StatusKehadiran {
  HADIR
  TIDAK_HADIR
  IZIN
  SAKIT
  BELUM_ABSEN
  TERLAMBAT
}

enum StatusSiswa {
  AKTIF
  TIDAK_AKTIF
  CUTI
}

enum StatusPayroll {
  DRAFT
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum MetodePembayaran {
  VIRTUAL_ACCOUNT
  TUNAI
  CARD
  OVER_THE_COUNTER
  DIRECT_DEBIT
  BANK_TRANSFER
  EWALLET
  RETAIL_OUTLET
  CREDIT_CARD
  QR_CODE
}

enum TipePembayaran {
  PENDAFTARAN
  SPP
}

enum TipeVoucher {
  PERSENTASE
  NOMINAL
}

enum XenditStatus {
  PENDING
  PAID
  SETTLED
  EXPIRED
  FAILED
}

enum XenditDisbursementStatus {
  PENDING
  COMPLETED
  FAILED
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum FinanceCategory {
  SPP
  ENROLLMENT
  DONATION
  OTHER_INCOME

  PAYROLL_SALARY
  OPERATIONAL
  UTILITIES
  MAINTENANCE
  MARKETING
  SUPPLIES
  OTHER_EXPENSE
}

model PendaftaranTemp {
  id               String   @id @default(uuid())
  namaMurid        String
  namaPanggilan    String?
  tanggalLahir     String?
  jenisKelamin     Gender
  alamat           String?
  chanelId         String?
  strataPendidikan SPM?
  kelasSekolah     String?
  email            String
  namaSekolah      String?
  namaOrangTua     String
  namaPenjemput    String?
  noWhatsapp       String?
  programId        String
  kodeVoucher      String?
  biayaPendaftaran Decimal  @db.Decimal(10, 2)
  diskon           Decimal  @db.Decimal(10, 2)
  totalBiaya       Decimal  @db.Decimal(10, 2)
  pembayaranId     String   @unique
  voucherId        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  chanel           Chanel?  @relation(fields: [chanelId], references: [id])
}
  
model PendaftaranPrivateTemp {
  id               String   @id @default(uuid())
  siswaPrivateId   String?
  chanelId         String
  isFamily         Boolean  @default(false)
  hubunganKeluarga String?
  jenisHubungan    String?
  kartuKeluarga    String?
  kodeVoucher      String?
  diskon           Decimal? @db.Decimal(10, 2)
  totalBiaya       Decimal  @db.Decimal(10, 2)
  programId        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  siswaPrivate SiswaPrivateTemp? @relation(fields: [siswaPrivateId], references: [id])
  chanel       Chanel           @relation(fields: [chanelId], references: [id])
}

model SiswaPrivateTemp {
  id                     String                   @id @default(uuid())
  namaMurid              String
  namaPanggilan          String?
  tanggalLahir           String?
  jenisKelamin           Gender
  alamat                 String?
  strataPendidikan       SPM?
  kelasSekolah           String?
  email                  String
  namaSekolah            String?
  namaOrangTua           String
  namaPenjemput          String?
  noWhatsapp             String?
  biayaPendaftaran       Decimal                  @db.Decimal(10, 2)
  PendaftaranPrivateTemp PendaftaranPrivateTemp[]
}

model Chanel {
  id                     String                   @id @default(uuid())
  chanelName             String
  isOther                Boolean?                 @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  PendaftaranPrivateTemp PendaftaranPrivateTemp[]
  PendaftaranTemp        PendaftaranTemp[]
}
