datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "rhel-openssl-1.0.x", "windows"]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  rfid      String?   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  siswa               Siswa?
  admin               Admin?
  guru                Guru?
  token               Token[]
  passwordResetTokens PasswordResetToken[]
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

// Student model
model Siswa {
  id               String   @id @default(uuid())
  userId           String   @unique
  noWhatsapp       String?
  nis              String? @unique
  namaMurid        String
  namaPanggilan    String?
  tanggalLahir     String?
  jenisKelamin     Gender
  alamat           String?
  strataPendidikan SPM?
  kelasSekolah     String?
  namaSekolah      String?
  namaOrangTua     String?
  namaPenjemput    String?
  isRegistered     Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  pendaftaran  Pendaftaran? // Siswa hanya memiliki satu pendaftaran
  programSiswa ProgramSiswa[] // Siswa hanya memiliki satu program aktif, history program lama tetap ada
  AbsensiSiswa AbsensiSiswa[]
  kelasPengganti KelasPengganti[]
}

// Admin model
model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
}

// Teacher model
model Guru {
  id                 String   @id @default(uuid())
  userId             String   @unique
  nip                String?  @unique
  nama               String
  noWhatsapp         String?
  alamat             String?
  jenisKelamin       Gender?
  tanggalLahir       String?
  fotoProfile        String?
  keahlian           String?
  pendidikanTerakhir String?
  noRekening         String?
  namaBank           String?
  suratKontrak       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  kelasProgram KelasProgram[]
  payroll      Payroll[]
  AbsensiGuru  AbsensiGuru[]
}

model Kelas {
  id                 String   @id @default(uuid())
  namaKelas          String
  ipAddressHikvision String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  kelasProgram KelasProgram[]
}

model Program {
  id          String   @id @default(uuid())
  namaProgram String
  deskripsi   String?
  cover       String?
  biayaSpp    Decimal  @db.Decimal(10, 2) @default(300000.00)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  kelasProgram KelasProgram[]
  programSiswa ProgramSiswa[]
}

model Testimoni {
  id        String   @id @default(uuid())
  nama      String
  posisi    String
  isi       String   @db.Text
  fotoUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Galeri {
  id           String   @id @default(uuid())
  judulFoto    String
  coverGaleri  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Finance {
  id          String          @id @default(uuid())
  tanggal     String
  deskripsi   String
  type        FinanceType
  category    FinanceCategory
  total       Decimal         @db.Decimal(12, 2)
  evidence    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model JamMengajar {
  id         String   @id @default(uuid())
  jamMulai   String
  jamSelesai String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  kelasProgram       KelasProgram[]
  JadwalProgramSiswa JadwalProgramSiswa[]
}

model KelasProgram {
  id            String    @id @default(uuid())
  kelasId       String?
  programId     String
  hari          HARI
  jamMengajarId String
  guruId        String?
  tipeKelas     TipeKelas @default(GROUP)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  kelas        Kelas?         @relation(fields: [kelasId], references: [id])
  program      Program        @relation(fields: [programId], references: [id])
  jamMengajar  JamMengajar    @relation(fields: [jamMengajarId], references: [id])
  guru         Guru?          @relation(fields: [guruId], references: [id])
  programSiswa ProgramSiswa[] // Relasi langsung ke ProgramSiswa
  absensiSiswa AbsensiSiswa[]
  absensiGuru  AbsensiGuru[]
  kelasPengganti KelasPengganti[]
}

model KelasPengganti {
  id             String    @id @default(uuid())
  kelasProgramId String
  siswaId        String
  isTemp         Boolean   @default(true)
  tanggal        String
  count          Int       @default(1)
  deletedAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  kelasProgram KelasProgram @relation(fields: [kelasProgramId], references: [id])
  siswa        Siswa        @relation(fields: [siswaId], references: [id])

  @@unique([kelasProgramId, siswaId, tanggal])
  @@map("kelas_pengganti")
}

enum TipeKelas {
  GROUP // Rp 35,000/sesi
  PRIVATE // Rp 35,000/sesi
  SUBSTITUTE // Rp 25,000/sesi (Guru Pengganti)
  ONLINE // Rp 25,000/sesi (Online diluar Surau)
}

// Model Pendaftaran (sekali untuk satu siswa)
model Pendaftaran {
  id               String   @id @default(uuid())
  siswaId          String   @unique
  biayaPendaftaran Decimal  @db.Decimal(10, 2)
  tanggalDaftar    String
  diskon           Decimal  @db.Decimal(10, 2)
  totalBiaya       Decimal  @db.Decimal(10, 2)
  voucher_id       String?
  pembayaranId     String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  voucher    Voucher?    @relation(fields: [voucher_id], references: [id])
  siswa      Siswa       @relation(fields: [siswaId], references: [id])
  pembayaran Pembayaran? @relation(fields: [pembayaranId], references: [id])
}

// Model Program Siswa (hubungan siswa dengan program)
model ProgramSiswa {
  id             String      @id @default(uuid())
  siswaId        String
  programId      String
  kelasProgramId String?
  status         StatusSiswa
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  siswa              Siswa                @relation(fields: [siswaId], references: [id])
  program            Program              @relation(fields: [programId], references: [id])
  kelasProgram       KelasProgram?        @relation(fields: [kelasProgramId], references: [id])
  riwayatStatus      RiwayatStatusSiswa[]
  periodeSpp         PeriodeSpp[]
  JadwalProgramSiswa JadwalProgramSiswa[]
}

model JadwalProgramSiswa {
  id             String @id @default(uuid())
  programSiswaId String
  hari           HARI
  jamMengajarId  String
  urutan         Int 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations  
  programSiswa ProgramSiswa @relation(fields: [programSiswaId], references: [id])
  jamMengajar  JamMengajar  @relation(fields: [jamMengajarId], references: [id])
}

// Model Jadwal Siswa (untuk menyimpan jadwal-jadwal siswa per program)

model RiwayatStatusSiswa {
  id               String      @id @default(uuid())
  programSiswaId   String
  statusLama       StatusSiswa
  statusBaru       StatusSiswa
  tanggalPerubahan String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  programSiswa ProgramSiswa @relation(fields: [programSiswaId], references: [id])
}

model AbsensiSiswa {
  id              String          @id @default(uuid())
  kelasProgramId  String
  siswaId         String
  tanggal         String
  statusKehadiran StatusKehadiran
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  siswa        Siswa        @relation(fields: [siswaId], references: [id])
  kelasProgram KelasProgram @relation(fields: [kelasProgramId], references: [id])
}

model AbsensiGuru {
  id                     String          @id @default(uuid())
  kelasProgramId         String
  payrollId              String?
  guruId                 String
  tanggal                String
  jamMasuk               String?
  sks                    Int
  suratIzin              String?
  keterangan             String?
  statusKehadiran        StatusKehadiran
  // Add these fields for tracking lateness and penalties
  terlambat              Boolean         @default(false)
  menitTerlambat         Int?
  potonganTerlambat      Decimal?        @db.Decimal(10, 2) // Rp 10,000 for late
  potonganTanpaKabar     Decimal?        @db.Decimal(10, 2) // Rp 20,000 for absence without notice
  potonganTanpaSuratIzin Decimal?        @db.Decimal(10, 2) // Rp 10,000 for absence without permission letter
  // Incentive tracking
  insentifKehadiran      Decimal?        @db.Decimal(10, 2) // Rp 10,000 if minimum 2 SKS per day
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  // Relations
  guru         Guru         @relation(fields: [guruId], references: [id])
  payroll      Payroll?     @relation(fields: [payrollId], references: [id])
  kelasProgram KelasProgram @relation(fields: [kelasProgramId], references: [id])
}

model Voucher {
  id               String      @id @default(uuid())
  kodeVoucher      String      @unique
  namaVoucher      String      
  tipe             TipeVoucher
  nominal          Decimal     @db.Decimal(10, 2)
  isActive         Boolean     @default(true)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  PeriodeSpp  PeriodeSpp[]
  Pendaftaran Pendaftaran[]
}

model PeriodeSpp {
  id             String   @id @default(uuid())
  programSiswaId String
  bulan          String
  tahun          Int
  tanggalTagihan String
  jumlahTagihan  Decimal  @db.Decimal(10, 2)
  diskon         Decimal? @db.Decimal(10, 2)
  totalTagihan   Decimal  @db.Decimal(10, 2)
  pembayaranId   String?  @unique
  voucher_id     String?
  voucher        Voucher? @relation(fields: [voucher_id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  programSiswa ProgramSiswa @relation(fields: [programSiswaId], references: [id])
  pembayaran   Pembayaran?  @relation(fields: [pembayaranId], references: [id])
}

model Pembayaran {
  id                String            @id @default(uuid())
  tipePembayaran    TipePembayaran
  metodePembayaran  MetodePembayaran?
  jumlahTagihan     Decimal           @db.Decimal(10, 2)
  statusPembayaran  StatusPembayaran
  tanggalPembayaran String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  periodeSpp    PeriodeSpp?
  pendaftaran   Pendaftaran?
  xenditPayment XenditPayment?
}

model XenditPayment {
  id                   String       @id @default(uuid())
  pembayaranId         String       @unique
  xenditInvoiceId      String       @unique
  xenditExternalId     String
  xenditPaymentUrl     String
  xenditPaymentChannel String
  xenditExpireDate     String
  xenditPaidAt         String?
  xenditStatus         XenditStatus
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  // Relations
  pembayaran Pembayaran @relation(fields: [pembayaranId], references: [id])
}

model Payroll {
  id        String        @id @default(uuid())
  guruId    String
  periode   String
  bulan     String
  tahun     Int
  gajiPokok Decimal       @db.Decimal(10, 2)
  insentif  Decimal?      @db.Decimal(10, 2)
  potongan  Decimal       @db.Decimal(10, 2)
  totalGaji Decimal       @db.Decimal(10, 2)
  status    StatusPayroll
  catatan   String?       // Field catatan optional
  tanggalKalkulasi DateTime @default(now())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  guru                Guru                 @relation(fields: [guruId], references: [id])
  payrollDisbursement PayrollDisbursement?
  absensiGuru         AbsensiGuru[]
}

model PayrollDisbursement {
  id            String   @id @default(uuid())
  payrollId     String   @unique
  amount        Decimal  @db.Decimal(10, 2)
  tanggalProses String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  payroll            Payroll             @relation(fields: [payrollId], references: [id])
  xenditDisbursement XenditDisbursement?
}

model XenditDisbursement {
  id                    String                   @id @default(uuid())
  payrollDisbursementId String                   @unique
  xenditDisbursementId  String                   @unique
  xenditExternalId      String
  xenditAmount          Decimal                  @db.Decimal(10, 2)
  xenditStatus          XenditDisbursementStatus
  xenditCreatedAt       String
  xenditUpdatedAt       String?
  rawResponse           Json?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt

  // Relations
  payrollDisbursement PayrollDisbursement @relation(fields: [payrollDisbursementId], references: [id])
}

model PayrollBatchDisbursement {
  id              String   @id @default(uuid())
  xenditBatchId   String   @unique
  reference       String
  status          String
  totalAmount     Decimal  @db.Decimal(10, 2)
  totalCount      Int
  payrollIds      Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum HARI {
  SENIN
  SELASA
  RABU
  KAMIS
  JUMAT
  SABTU
}

enum Role {
  SUPER_ADMIN
  ADMIN_SURAU
  ADMIN
  SISWA
  GURU
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum SPM {
  PAUD
  TK
  SD
  SMP
  SMA
  KULIAH
  UMUM
}

enum StatusPembayaran {
  UNPAID
  PENDING
  PAID
  LUNAS
  SETTLED
  EXPIRED
  INACTIVE
  ACTIVE
  STOPPED
}

enum StatusVerifikasi {
  MENUNGGU
  DIVERIFIKASI
}

enum StatusKehadiran {
  HADIR
  TIDAK_HADIR
  IZIN
  SAKIT
  BELUM_ABSEN
  TERLAMBAT
}

enum StatusSiswa {
  AKTIF
  TIDAK_AKTIF
  CUTI
}

enum StatusPayroll {
  DRAFT
  DIPROSES
  SELESAI
  GAGAL
}

enum MetodePembayaran {
  VIRTUAL_ACCOUNT
  TUNAI
  CARD
  OVER_THE_COUNTER
  DIRECT_DEBIT
  BANK_TRANSFER
  EWALLET
  RETAIL_OUTLET
  CREDIT_CARD
  QR_CODE
}

enum TipePembayaran {
  PENDAFTARAN
  SPP
}

enum TipeVoucher {
  PERSENTASE
  NOMINAL
}

enum XenditStatus {
  PENDING
  PAID
  SETTLED
  EXPIRED
  FAILED
}

enum XenditDisbursementStatus {
  PENDING
  COMPLETED
  FAILED
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum FinanceCategory {
  // Income categories
  SPP
  ENROLLMENT
  DONATION
  OTHER_INCOME
  
  // Expense categories  
  PAYROLL_SALARY
  OPERATIONAL
  UTILITIES
  MAINTENANCE
  MARKETING
  SUPPLIES
  OTHER_EXPENSE
}

model PendaftaranTemp {
  id               String   @id @default(uuid())
  namaMurid        String
  namaPanggilan    String?
  tanggalLahir     String?
  jenisKelamin     Gender
  alamat           String?
  strataPendidikan SPM?
  kelasSekolah     String?
  email            String
  namaSekolah      String?
  namaOrangTua     String
  namaPenjemput    String?
  noWhatsapp       String?
  programId        String
  kodeVoucher      String?
  biayaPendaftaran Decimal  @db.Decimal(10, 2)
  diskon           Decimal  @db.Decimal(10, 2)
  totalBiaya       Decimal  @db.Decimal(10, 2)
  pembayaranId     String   @unique
  voucherId        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
